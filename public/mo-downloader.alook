{
  "match": 0,
  "info": "mo\u4e0b\u8f7d\u5668",
  "regex": "m.tribe-m.jp@@m.ex-m.jp@@m.ldh-m.jp@@m.ldhgirls-m.jp",
  "runat": 0,
  "version": "0.31",
  "author": "\u4e59\u919a",
  "name": "mo\u4e0b\u8f7d\u5668",
  "code": "Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgICAgbW8gKExESCkg5LiL6L295ZmoCi8vIEBuYW1lc3BhY2UgICAgICAgICAgIGh0dHBzOi8vMW1ldGhlci5tZS8KLy8gQHZlcnNpb24gICAgICAgICAgICAgMC4zMQovLyBAZGVzY3JpcHRpb24gICAgICAgICDlnKhtb+eahOWGheWuuemhteWinuWKoOWbvueJh+WSjOinhumikeS4i+i9veeahOaMiemSru+8jCDop6PplIHlj7PplK7lip/og70KLy8gQGF1dGhvciAgICAgICAgICAgICAg5LmZ6YaaKEBsb2NvZGEpCi8vIEBtYXRjaCAgICAgICAgICAgICAgIGh0dHAqOi8vbS50cmliZS1tLmpwLyoKLy8gQG1hdGNoICAgICAgICAgICAgICAgaHR0cCo6Ly9tLmV4LW0uanAvKgovLyBAbWF0Y2ggICAgICAgICAgICAgICBodHRwKjovL20ubGRoLW0uanAvKgovLyBAbWF0Y2ggICAgICAgICAgICAgICBodHRwKjovL20ubGRoZ2lybHMtbS5qcC8qCi8vIEBpY29uICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWxkaC5jby5qcAovLyBAc291cmNlICAgICAgICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vbG9jb2RhL21vLWRvd25sb2FkZXIKLy8gQHVwZGF0ZVVSTCAgICAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2xvY29kYS9tby1kb3dubG9hZGVyL3Jhdy9tYWluL21vLWRvd25sb2Rlci51c2VyLmpzCi8vIEBkb3dubG9hZFVSTCAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2NvZGEvbW8tZG93bmxvYWRlci9yYXcvbWFpbi9tby1kb3dubG9kZXIudXNlci5qcwovLyBAbGljZW5zZSAgICAgICAgICAgICBNSVQKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24gKCkgewogICAgInVzZSBzdHJpY3QiOwogICAgLy8gPT09PT09PT09PT09PT09PQogICAgLy8gPSAgICBDb25zdHMgICAgPQogICAgLy8gPT09PT09PT09PT09PT09PQoKICAgIGNvbnN0IGlzTW9iaWxlID0gKCkgPT4KICAgICAgICAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoCiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQKICAgICAgICApOwoKICAgIGNvbnN0IGtleXdvcmRzID0gWyJ1cGxjbW4iLCAidXBsb2FkIl07CgogICAgLy8gPT09PT09PT09PT09PT0KICAgIC8vID0gICAgTWFpbiAgICA9CiAgICAvLyA9PT09PT09PT09PT09PQoKICAgIC8vIOWIoOmZpOWbvueJh+S/neaKpAogICAgcmVtb3ZlUHJvdGVjdEltZygpOwogICAgLy8g5Zyo6K+m5oOF6aG15rOo5YWl5oyJ6ZKuCiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoImRldGFpbCIpKSB7CiAgICAgICAgaW5qZWN0RG93bmxvYWRBbGxCdXR0b25zKCk7CiAgICB9CiAgICAvLyDmoLnmja7op4bpopHms6jlhaXmjInpkq4KICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcygibW92aWUiKSkgewogICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJkaXYubGltZWxpZ2h0LXBsYXllciIpKSB7CiAgICAgICAgICAgIGluamVjdFBlclZpZGVvRG93bmxvYWRCdXR0b24oZG9jdW1lbnQpOwogICAgICAgIH0KICAgIH0KICAgIC8vIOWcqOaXtumXtOi9tOeVjOmdouiuvue9rkxpc3RlbmVyCiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoInRpbWVsaW5lIikpIHsKICAgICAgICAvLyDnrYnlvoXliqDovb1zY3JvbGwKICAgICAgICAoZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJsZGgtaW5maW5pdGUtc2Nyb2xsIik7CiAgICAgICAgICAgIGlmIChjb3VudGVyKSB7CiAgICAgICAgICAgICAgICBjdXN0b21pemVkVGltZWxpbmVQYWdlKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGluaXQsIDMwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KSgpOwogICAgfQoKICAgIC8vID09PT09PT09PT09PT09PQogICAgLy8gPSAgICBVdGlscyAgICA9CiAgICAvLyA9PT09PT09PT09PT09PT0KCiAgICBmdW5jdGlvbiByZW1vdmVQcm90ZWN0SW1nKCkgewogICAgICAgIC8vIOenu+mZpOWPs+mUrumZkOWItgogICAgICAgIGRvY3VtZW50Lm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH07CiAgICAgICAgLy8g56e76ZmkcHJvdGVjdGltZ+mZkOWItgogICAgICAgIGRvY3VtZW50CiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCIucHJvdGVjdGltZyIpCiAgICAgICAgICAgIC5mb3JFYWNoKChub2RlKSA9PiBub2RlLmNsYXNzTGlzdC5yZW1vdmUoInByb3RlY3RpbWciKSk7CiAgICAgICAgbW9Eb3dubG9hZGVyTG9nKCLnp7vpmaTlj7PplK7pmZDliLYiKTsKICAgIH0KCiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gPSAgICBCdXR0b24gSW5qZWN0aW9uIFV0aWxzICAgID0KICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogICAgZnVuY3Rpb24gaW5qZWN0RG93bmxvYWRBbGxCdXR0b25zKCkgewogICAgICAgIHZhciBhcnRpY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiYXJ0aWNsZSIpOwogICAgICAgIGlmIChhcnRpY2xlLmNsYXNzTGlzdC5jb250YWlucygiYXJ0aWNsZS0tbmV3cyIpKSB7CiAgICAgICAgICAgIC8vIOaWsOmXu+mhtemdoueJueauiuWkhOeQhgogICAgICAgICAgICBhcnRpY2xlID0gYXJ0aWNsZS5xdWVyeVNlbGVjdG9yKCIuYXJ0aWNsZV9fYm9keSIpOwogICAgICAgIH0KICAgICAgICBhdHRhY2hCdXR0b25Ub0FydGljbGUoYXJ0aWNsZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZmluZEVsaWdpYmxlSW1ncyhhcnRpY2xlKSB7CiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYXJ0aWNsZS5xdWVyeVNlbGVjdG9yQWxsKCJpbWciKSkKICAgICAgICAgICAgLm1hcCgoaW1nKSA9PiBpbWcuc3JjKQogICAgICAgICAgICAuZmlsdGVyKChpbWcpID0+IGtleXdvcmRzLnNvbWUoKGspID0+IGltZy5pbmNsdWRlcyhrKSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIGF0dGFjaEJ1dHRvblRvQXJ0aWNsZShhcnRpY2xlKSB7CiAgICAgICAgdmFyIGltZ3MgPSBmaW5kRWxpZ2libGVJbWdzKGFydGljbGUpOwogICAgICAgIC8vIOazqOWFpeaMiemSriBkaXYKICAgICAgICB2YXIgYnV0dG9uc0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIGJ1dHRvbnNEaXYuY2xhc3NOYW1lID0gImxkaC1tby1kbCI7CiAgICAgICAgYnV0dG9uc0Rpdi5zdHlsZSA9ICJtYXJnaW4tdG9wOiAwLjRlbTsgbWFyZ2luLWJvdHRvbTogMC40ZW07IjsKICAgICAgICBhcnRpY2xlLmluc2VydEJlZm9yZShidXR0b25zRGl2LCBhcnRpY2xlLmZpcnN0Q2hpbGQpOwogICAgICAgIC8vIOWbvueJh+mTvuaOpeeUn+aIkOaMiemSrgogICAgICAgIGlmIChpc01vYmlsZSgpKSB7CiAgICAgICAgICAgIGluamVjdE9uZUJ1dHRvbigKICAgICAgICAgICAgICAgIGJ1dHRvbnNEaXYsCiAgICAgICAgICAgICAgICAi55Sf5oiQ5Zu+54mH6ZO+5o6lKCIgKyBpbWdzLmxlbmd0aCArICIpIiwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZU9uQ2xpY2tIYW5kbGVyKGJ1dHRvbnNEaXYsIGFydGljbGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIOWbvueJh+S4i+i9veaMiemSrgogICAgICAgICAgICBpbmplY3RPbmVCdXR0b24oCiAgICAgICAgICAgICAgICBidXR0b25zRGl2LAogICAgICAgICAgICAgICAgIuS4i+i9veaJgOacieWbvueJhyAoIiArIGltZ3MubGVuZ3RoICsgIikiLAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGRvd25sb2FkT25DbGlja0hhbmRsZXIoYXJ0aWNsZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIC8vIOinhumikeS4i+i9veaMiemSrgogICAgICAgIGlmICgKICAgICAgICAgICAgYXJ0aWNsZS5xdWVyeVNlbGVjdG9yKCJkaXYubGltZWxpZ2h0LXBsYXllciIpIHx8CiAgICAgICAgICAgIGFydGljbGUucXVlcnlTZWxlY3RvcigiYS5wb3B1cF9saW5rIikKICAgICAgICApIHsKICAgICAgICAgICAgLy8gTGlzdCBWaWV3IOinhumikQogICAgICAgICAgICBpbmplY3RQZXJWaWRlb0Rvd25sb2FkQnV0dG9uKGFydGljbGUpOwogICAgICAgICAgICAvLyBUaW1lbGluZSDop4bpopEKICAgICAgICAgICAgaW5qZWN0UGVyVmlkZW9Eb3dubG9hZEJ1dHRvbkZvclRpbWVsaW5lKGFydGljbGUpOwogICAgICAgIH0KICAgICAgICBtb0Rvd25sb2FkZXJMb2coIuazqOWFpeaMiemSriIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGluamVjdFBlclZpZGVvRG93bmxvYWRCdXR0b24oZGl2KSB7CiAgICAgICAgZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoImRpdi5saW1lbGlnaHQtcGxheWVyIikuZm9yRWFjaCgodmlkZW9EaXYpID0+IHsKICAgICAgICAgICAgdmFyIG1lZGlhSWQgPSB2aWRlb0Rpdi5pZC5zdWJzdHJpbmcodmlkZW9EaXYuaWQubGFzdEluZGV4T2YoIl8iKSArIDEpOwogICAgICAgICAgICBtb0Rvd25sb2FkZXJEZWJ1Zygi5q2j5Zyo5LiL6L296KeG6aKR77yaICIgKyBtZWRpYUlkKTsKICAgICAgICAgICAgaW5qZWN0T25lQnV0dG9uKHZpZGVvRGl2LnBhcmVudEVsZW1lbnQsICLkuIvovb3op4bpopEiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgIGRvd25sb2FkVmlkZW8oCiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LAogICAgICAgICAgICAgICAgICAgIG1lZGlhSWQsCiAgICAgICAgICAgICAgICAgICAgZ2V0UHJlZml4RnJvbUFydGljbGUoZGl2KSB8fCBnZXRQcmVmaXhGcm9tRG9jdW1lbnQoKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gaW5qZWN0UGVyVmlkZW9Eb3dubG9hZEJ1dHRvbkZvclRpbWVsaW5lKGRpdikgewogICAgICAgIGRpdi5xdWVyeVNlbGVjdG9yQWxsKCJhLnBvcHVwX2xpbmsiKS5mb3JFYWNoKCh2aWRlb0RpdikgPT4gewogICAgICAgICAgICB2YXIgbWVkaWFJZCA9IHZpZGVvRGl2CiAgICAgICAgICAgICAgICAuZ2V0QXR0cmlidXRlKCJvbmNsaWNrIikKICAgICAgICAgICAgICAgIC5zcGxpdCgibW92aWUvIilbMV0KICAgICAgICAgICAgICAgIC5zcGxpdCgiLyIpWzBdOwogICAgICAgICAgICBtb0Rvd25sb2FkZXJEZWJ1Zygi5q2j5Zyo5LiL6L296KeG6aKR77yaICIgKyBtZWRpYUlkKTsKICAgICAgICAgICAgaW5qZWN0T25lQnV0dG9uKHZpZGVvRGl2LnBhcmVudEVsZW1lbnQsICLkuIvovb3op4bpopEiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgIGRvd25sb2FkVmlkZW8oCiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LAogICAgICAgICAgICAgICAgICAgIG1lZGlhSWQsCiAgICAgICAgICAgICAgICAgICAgZ2V0UHJlZml4RnJvbUFydGljbGUoZGl2KSB8fCBnZXRQcmVmaXhGcm9tRG9jdW1lbnQoKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gaW5qZWN0T25lQnV0dG9uKGVsZW1lbnQsIHRleHRPbkJ1dHRvbiwgY2xpY2tMaXN0ZW5lcikgewogICAgICAgIHZhciBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJCVVRUT04iKTsKICAgICAgICB2YXIgYnRuVGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHRPbkJ1dHRvbik7CiAgICAgICAgYnRuLmFwcGVuZENoaWxkKGJ0blRleHQpOwogICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGNsaWNrTGlzdGVuZXIpOwogICAgICAgIGJ0bi5zdHlsZSA9CiAgICAgICAgICAgICJiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgYm9yZGVyOiBzb2xpZCAjODA4MDgwIDJweDsgYm9yZGVyLXJhZGl1czogMjBweDsgY29sb3I6ICM1NDU0NTQ7IG1hcmdpbjogMC4yZW0iOwogICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoYnRuKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkb3dubG9hZE9uQ2xpY2tIYW5kbGVyKGFydGljbGUpIHsKICAgICAgICBkb3dubG9hZEltYWdlcyhmaW5kRWxpZ2libGVJbWdzKGFydGljbGUpLCBnZXRQcmVmaXhGcm9tQXJ0aWNsZShhcnRpY2xlKSk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2VuZXJhdGVPbkNsaWNrSGFuZGxlcihidXR0b25zRGl2LCBhcnRpY2xlKSB7CiAgICAgICAgdmFyIGltZ3MgPSBmaW5kRWxpZ2libGVJbWdzKGFydGljbGUpOwogICAgICAgIHZhciB0ZXh0YXJlYSA9IGJ1dHRvbnNEaXYucXVlcnlTZWxlY3RvcigidGV4dGFyZWEubGRoLW1vLWRsIik7CiAgICAgICAgaWYgKCF0ZXh0YXJlYSkgewogICAgICAgICAgICB0ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRleHRhcmVhIik7CiAgICAgICAgICAgIHRleHRhcmVhLmNsYXNzTmFtZSA9ICJsZGgtbW8tZGwiOwogICAgICAgICAgICB0ZXh0YXJlYS5zdHlsZSA9ICJoZWlnaHQ6IDEwMHB4OyB3aWR0aDogODAlOyI7CiAgICAgICAgICAgIHZhciBiciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJyIik7CiAgICAgICAgICAgIGJ1dHRvbnNEaXYuaW5zZXJ0QmVmb3JlKGJyLCBidXR0b25zRGl2LmZpcnN0Q2hpbGQpOwogICAgICAgICAgICBidXR0b25zRGl2Lmluc2VydEJlZm9yZSh0ZXh0YXJlYSwgYnV0dG9uc0Rpdi5maXJzdENoaWxkKTsKICAgICAgICB9CiAgICAgICAgdGV4dGFyZWEudmFsdWUgPSBpbWdzLmpvaW4oIlxuIik7CiAgICAgICAgdGV4dGFyZWEuc2VsZWN0KCk7CiAgICB9CgogICAgZnVuY3Rpb24gY3VzdG9taXplZFRpbWVsaW5lUGFnZSgpIHsKICAgICAgICAvLyDliJ3lp4vljJYKICAgICAgICBkb2N1bWVudAogICAgICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgibGRoLWluZmluaXRlLXNjcm9sbCBhcnRpY2xlIikKICAgICAgICAgICAgLmZvckVhY2goKGFydGljbGUpID0+IGF0dGFjaEJ1dHRvblRvQXJ0aWNsZShhcnRpY2xlKSk7CiAgICAgICAgLy8KICAgICAgICBjb25zdCBpbmZpbml0ZVNjcm9sbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoCiAgICAgICAgICAgICJsZGgtaW5maW5pdGUtc2Nyb2xsIgogICAgICAgICk7CiAgICAgICAgY29uc3QgY29uZmlnID0geyBjaGlsZExpc3Q6IHRydWUgfTsKICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMsIG9ic2VydmVyKSB7CiAgICAgICAgICAgIHZhciBub2RlcyA9IG11dGF0aW9ucy5maW5kKChyKSA9PgogICAgICAgICAgICAgICAgQXJyYXkuZnJvbShyLmFkZGVkTm9kZXMpLmZpbHRlcigobikgPT4gKG4uY2xhc3NOYW1lID0gImFydGljbGUiKSkKICAgICAgICAgICAgKS5hZGRlZE5vZGVzOwogICAgICAgICAgICBub2Rlcy5mb3JFYWNoKChub2RlKSA9PgogICAgICAgICAgICAgICAgYXR0YWNoQnV0dG9uVG9BcnRpY2xlKG5vZGUucXVlcnlTZWxlY3RvcigiYXJ0aWNsZSIpKQogICAgICAgICAgICApOwogICAgICAgICAgICByZW1vdmVQcm90ZWN0SW1nKCk7CiAgICAgICAgICAgIG1vRG93bmxvYWRlckRlYnVnKCLop6PpmaTliLfmlrDlkI7ml7bpl7Tnur/lj7PplK7pmZDliLYiKTsKICAgICAgICB9KTsKICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGluZmluaXRlU2Nyb2xsQ29udGFpbmVyLCBjb25maWcpOwogICAgICAgIG1vRG93bmxvYWRlckxvZygiVGltZWxpbmXpobXpnaLms6jlhaXmjInpkq4iKTsKICAgIH0KCiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vID0gICAgRG93bmxvYWQgVXRpbHMgICAgPQogICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09CgogICAgZnVuY3Rpb24gZG93bmxvYWRJbWFnZXMoaW1ncywgcHJlZml4ID0gIiIpIHsKICAgICAgICBtb0Rvd25sb2FkZXJEZWJ1Zygi5q2j5Zyo5LiL6L295Zu+54mH77yaICIgKyBpbWdzKTsKICAgICAgICAvLyBUaGFua3MgdG8gaHR0cHM6Ly9naXRodWIuY29tL3kyNTIzMjgvSW5zdGFncmFtX0Rvd25sb2FkX0J1dHRvbgogICAgICAgIGltZ3MubWFwKChpbWcpID0+CiAgICAgICAgICAgIGZldGNoKGltZywgewogICAgICAgICAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoewogICAgICAgICAgICAgICAgICAgIE9yaWdpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpbiwKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgbW9kZTogImNvcnMiLAogICAgICAgICAgICAgICAgY2FjaGU6ICJuby1jYWNoZSIsCiAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmJsb2IoKSkKICAgICAgICAgICAgICAgIC50aGVuKChibG9iKSA9PgogICAgICAgICAgICAgICAgICAgIGRvd2xvYWRCbG9iKAogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSwKICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4ICsgaW1nLnN1YnN0cmluZyhpbWcubGFzdEluZGV4T2YoIi8iKSArIDEpCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PiBjb25zb2xlLmVycm9yKGUpKQogICAgICAgICk7CiAgICB9CgogICAgZnVuY3Rpb24gZG93bmxvYWRWaWRlbyhidXR0b24sIHZpZGVvLCBwcmVmaXggPSAiIikgewogICAgICAgIGNvbnN0IHZpZGVvUmVxdWVzdFVSTCA9CiAgICAgICAgICAgICJodHRwczovL3Byb2R1Y3Rpb24tcHMubHZwLmxsbncubmV0L3IvUGxheWxpc3RTZXJ2aWNlL21lZGlhLzxtZWRpYUlkPi9nZXRNb2JpbGVQbGF5bGlzdEJ5TWVkaWFJZCI7CiAgICAgICAgZmV0Y2godmlkZW9SZXF1ZXN0VVJMLnJlcGxhY2UoIjxtZWRpYUlkPiIsIHZpZGVvKSwgewogICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7CiAgICAgICAgICAgICAgICBPcmlnaW46IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sCiAgICAgICAgICAgICAgICBSZWZlcmVyOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgbW9kZTogImNvcnMiLAogICAgICAgICAgICBjYWNoZTogIm5vLWNhY2hlIiwKICAgICAgICB9KQogICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSkKICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgICAgICAvLyDkuLttM3U4CiAgICAgICAgICAgICAgICBsZXQgbTN1OFVybCA9IHJlc3BvbnNlLm1lZGlhTGlzdFswXS5tb2JpbGVVcmxzCiAgICAgICAgICAgICAgICAgICAgLmZpbmQoKHYpID0+IHYudGFyZ2V0TWVkaWFQbGF0Zm9ybSA9PSAiSHR0cExpdmVTdHJlYW1pbmciKQogICAgICAgICAgICAgICAgICAgIC5tb2JpbGVVcmwucmVwbGFjZSgiaHR0cDovLyIsICJodHRwczovLyIpOwogICAgICAgICAgICAgICAgZmV0Y2gobTN1OFVybCkKICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLnRleHQoKSkKICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8g6I635Y+WbTN1OOS4reacgOmrmOa4heeahAogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYW5kd2l0aFJlID0gL0JBTkRXSURUSD0oXGQrKS9pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxpZ2libGVTdHJlYW1zUmF3ID0gcmVzcG9uc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgiI0VYVC1YLVNUUkVBTS1JTkY6IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgxKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZ2libGVTdHJlYW1zUmF3LnNvcnQoKGEsIGIpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoYi5tYXRjaChiYW5kd2l0aFJlKVsxXSkgLQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGEubWF0Y2goYmFuZHdpdGhSZSlbMV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IGVsaWdpYmxlU3RyZWFtc1Jhd1swXS5zcGxpdCgiXG4iKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkwoY2FuZGlkYXRlLCBuZXcgVVJMKG0zdThVcmwpLm9yaWdpbikuaHJlZjsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC50aGVuKChtM3U4VXJsKSA9PgogICAgICAgICAgICAgICAgICAgICAgICBvcGVuTTNVOFRvb2xCb3goCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtM3U4VXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4ICsgZ2V0RmlsZW5hbWVGcm9tVmlkZW9VcmwobTN1OFVybCkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGRvd2xvYWRCbG9iKGJsb2IsIGZpbGVuYW1lKSB7CiAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgICAgYS5kb3dubG9hZCA9IGZpbGVuYW1lOwogICAgICAgIGEuaHJlZiA9IGJsb2I7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTsKICAgICAgICBhLmNsaWNrKCk7CiAgICAgICAgYS5yZW1vdmUoKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvcGVuTTNVOFRvb2xCb3goYnV0dG9uLCBtM3U4VXJsLCBmaWxlbmFtZSkgewogICAgICAgIC8vIOaJk+W8gCBodHRwczovL3Rvb2xzLnRoYXR3aW5kLmNvbS90b29sL20zdThkb3dubG9hZGVyCiAgICAgICAgaWYgKGlzTW9iaWxlKCkpIHsKICAgICAgICAgICAgbGV0IGlkID0gYnRvYShlbmNvZGVVUklDb21wb25lbnQoZmlsZW5hbWUpKTsKICAgICAgICAgICAgdmFyIGEgPSBidXR0b24ucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCJhLm1vLWRvd25sb2FkZXIiKTsKICAgICAgICAgICAgaWYgKCFhKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgICAgICAgICAgIHZhciBhVGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCLngrnlh7vmiZPlvIDkuIvovb3pobXpnaIiKTsKICAgICAgICAgICAgICAgIGEuY2xhc3NOYW1lID0gIm1vLWRvd25sb2FkZXIiOwogICAgICAgICAgICAgICAgYS5hcHBlbmQoYVRleHQpOwogICAgICAgICAgICAgICAgYS50YXJnZXQgPSAiX2JsYW5rIjsKICAgICAgICAgICAgICAgIGEuaHJlZiA9IGNvbnN0cnVjdE0zVThUb29sQm94VVJMKG0zdThVcmwsIGZpbGVuYW1lKTsKICAgICAgICAgICAgICAgIGJ1dHRvbi5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJyIikpOwogICAgICAgICAgICAgICAgYnV0dG9uLnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoYSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgICAgICAgYS50YXJnZXQgPSAiX2JsYW5rIjsKICAgICAgICAgICAgYS5ocmVmID0gY29uc3RydWN0TTNVOFRvb2xCb3hVUkwobTN1OFVybCwgZmlsZW5hbWUpOwogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpOwogICAgICAgICAgICBhLmNsaWNrKCk7CiAgICAgICAgICAgIGEucmVtb3ZlKCk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnN0cnVjdE0zVThUb29sQm94VVJMKG0zdThVcmwsIGZpbGVuYW1lKSB7CiAgICAgICAgdmFyIHVybCA9CiAgICAgICAgICAgICJodHRwczovL3Rvb2xzLnRoYXR3aW5kLmNvbS90b29sL20zdThkb3dubG9hZGVyIyIgKwogICAgICAgICAgICAibTN1OD0iICsKICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KG0zdThVcmwpICsKICAgICAgICAgICAgIiZyZWZlcmVyPSIgKwogICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhyZWYpICsKICAgICAgICAgICAgIiZmaWxlbmFtZT0iICsKICAgICAgICAgICAgZmlsZW5hbWU7CiAgICAgICAgbW9Eb3dubG9hZGVyRGVidWcodXJsKTsKICAgICAgICByZXR1cm4gdXJsOwogICAgfQoKICAgIC8vID09PT09PT09PT09PT09PT09PT09PT0KICAgIC8vID0gICAgTmFtaW5nIFV0aWxzICAgID0KICAgIC8vID09PT09PT09PT09PT09PT09PT09PT0KCiAgICBmdW5jdGlvbiBnZXRQcmVmaXhGcm9tQXJ0aWNsZShhcnRpY2xlKSB7CiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9CiAgICAgICAgICAgIGFydGljbGUucXVlcnlTZWxlY3RvcigiLmFydGljbGVfX2hlYWQiKSB8fAogICAgICAgICAgICBhcnRpY2xlLnF1ZXJ5U2VsZWN0b3IoIi5hcnRpY2xlX19oZWFkZXIiKTsKICAgICAgICBpZiAoY2FuZGlkYXRlKSB7CiAgICAgICAgICAgIHJldHVybiBzYW5pdGl6ZUZpbGVOYW1lKAogICAgICAgICAgICAgICAgY2FuZGlkYXRlLnRleHRDb250ZW50CiAgICAgICAgICAgICAgICAgICAgLnNwbGl0KC9ccy9nKQogICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHMpID0+IHMpCiAgICAgICAgICAgICAgICAgICAgLmpvaW4oIl8iKSArICJfIgogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gIiI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0UHJlZml4RnJvbURvY3VtZW50KCkgewogICAgICAgIHZhciBjYW5kaWRhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIubW92aWUtdGl0bGUtYmxvY2siKTsKICAgICAgICBpZiAoY2FuZGlkYXRlKSB7CiAgICAgICAgICAgIHJldHVybiBzYW5pdGl6ZUZpbGVOYW1lKAogICAgICAgICAgICAgICAgY2FuZGlkYXRlLnRleHRDb250ZW50CiAgICAgICAgICAgICAgICAgICAgLnNwbGl0KC9ccy9nKQogICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHMpID0+IHMpCiAgICAgICAgICAgICAgICAgICAgLmpvaW4oIl8iKSArICJfIgogICAgICAgICAgICApOwogICAgICAgIH0KICAgICAgICByZXR1cm4gIiI7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RmlsZW5hbWVGcm9tVmlkZW9VcmwodXJsKSB7CiAgICAgICAgbGV0IHRlbXBOYW1lID0gdXJsLnJlcGxhY2UoIi9yb290LW1lc3NhZ2UtY3hmLWFwYWNoZSIsICIiKTsKICAgICAgICB0ZW1wTmFtZSA9IHRlbXBOYW1lCiAgICAgICAgICAgIC5zdWJzdHJpbmcodGVtcE5hbWUubGFzdEluZGV4T2YoIi8iKSArIDEpCiAgICAgICAgICAgIC5yZXBsYWNlKCIubTN1OCIsICIudHMiKTsKICAgICAgICByZXR1cm4gdGVtcE5hbWU7CiAgICB9CgogICAgZnVuY3Rpb24gc2FuaXRpemVGaWxlTmFtZShpbnB1dCwgcmVwbGFjZW1lbnQgPSAiXyIpIHsKICAgICAgICAvLyBUaGFua3MgdG8gaHR0cHM6Ly9naXRodWIuY29tL3BhcnNoYXAvbm9kZS1zYW5pdGl6ZS1maWxlbmFtZS9ibG9iL21hc3Rlci9pbmRleC5qcwogICAgICAgIGNvbnN0IGlsbGVnYWxSZSA9IC9bXC9cPzw+XFw6XCpcfCJdL2c7CiAgICAgICAgY29uc3QgY29udHJvbFJlID0gL1tceDAwLVx4MWZceDgwLVx4OWZdL2c7CiAgICAgICAgY29uc3QgcmVzZXJ2ZWRSZSA9IC9eXC4rJC87CiAgICAgICAgY29uc3Qgd2luZG93c1Jlc2VydmVkUmUgPSAvXihjb258cHJufGF1eHxudWx8Y29tWzAtOV18bHB0WzAtOV0pKFwuLiopPyQvaTsKICAgICAgICBjb25zdCB3aW5kb3dzVHJhaWxpbmdSZSA9IC9bXC4gXSskLzsKICAgICAgICByZXR1cm4gaW5wdXQKICAgICAgICAgICAgLnJlcGxhY2UoaWxsZWdhbFJlLCByZXBsYWNlbWVudCkKICAgICAgICAgICAgLnJlcGxhY2UoY29udHJvbFJlLCByZXBsYWNlbWVudCkKICAgICAgICAgICAgLnJlcGxhY2UocmVzZXJ2ZWRSZSwgcmVwbGFjZW1lbnQpCiAgICAgICAgICAgIC5yZXBsYWNlKHdpbmRvd3NSZXNlcnZlZFJlLCByZXBsYWNlbWVudCkKICAgICAgICAgICAgLnJlcGxhY2Uod2luZG93c1RyYWlsaW5nUmUsIHJlcGxhY2VtZW50KTsKICAgIH0KCiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PQogICAgLy8gPSAgICBMb2dnaW5nIFV0aWxzICAgID0KICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09CgogICAgZnVuY3Rpb24gbW9Eb3dubG9hZGVyTG9nKG1zZykgewogICAgICAgIGNvbnNvbGUubG9nKCJbbW8tZG93bmxvZGVyXSAiICsgbXNnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBtb0Rvd25sb2FkZXJEZWJ1Zyhtc2cpIHsKICAgICAgICBjb25zb2xlLmRlYnVnKCJbbW8tZG93bmxvZGVyXSAiICsgbXNnKTsKICAgIH0KfSkoKTsK"
}